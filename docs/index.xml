<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HAL Today I Learned</title>
    <link>https://til.hal.com.mx/</link>
    <description>Recent content on HAL Today I Learned</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-mx</language>
    <lastBuildDate>Sun, 29 Mar 2020 22:00:26 -0600</lastBuildDate>
    
	<atom:link href="https://til.hal.com.mx/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Crear una secuencia de fechas en SQL Server</title>
      <link>https://til.hal.com.mx/posts/crear_secuencia_de_fechas_sql_server/</link>
      <pubDate>Sun, 29 Mar 2020 22:00:26 -0600</pubDate>
      
      <guid>https://til.hal.com.mx/posts/crear_secuencia_de_fechas_sql_server/</guid>
      <description>Crear una secuencia de fechas durante una consulta es una herramienta útil para crear series de tiempo completas, realizar comparaciones y verificar la integridad de datos, entre otras aplicaciones.
Por ejemplo, podemos pasar de tener datos como los siguientes:
   fecha valor     2020-01-01 1   2020-01-03 1   2020-01-05 1    A datos como estos:
   fecha valor     2020-01-01 1   2020-01-02 0   2020-01-03 1   2020-01-04 0   2020-01-05 1    En otras implementaciones de SQL esta es una tarea sencilla.</description>
    </item>
    
    <item>
      <title>Guardar gráficos de ggplot2 con readr</title>
      <link>https://til.hal.com.mx/posts/guardar_graficos_ggplot2_con_readr/</link>
      <pubDate>Wed, 29 Jan 2020 13:38:05 -0600</pubDate>
      
      <guid>https://til.hal.com.mx/posts/guardar_graficos_ggplot2_con_readr/</guid>
      <description>La principal ventaja de crear gráficos con ggplot2 es que tienes control fino de todos los elementos que los conforman.
Esta característica puede convertirse en una desventaja cuando has generado gráficos que contienen un gran número de partes y ajustes para cada una de ellas, pues esto siempre resulta en código más bien complejo.
La principal manera para lidiar con esta complejidad es guardar los gráficos generados con ggplot2 en objetos, para así poder manipularlos más adelante, sin necesidad de reusar tanto código.</description>
    </item>
    
    <item>
      <title>regex en postgres</title>
      <link>https://til.hal.com.mx/posts/regex_en_postgres/</link>
      <pubDate>Sat, 16 Nov 2019 10:56:55 -0600</pubDate>
      
      <guid>https://til.hal.com.mx/posts/regex_en_postgres/</guid>
      <description>Al hacer un query es frecuente que necesitemos encontrar registros de texto que coincidan con algunas reglas. Lo más común es buscar registros que contienen, inician o terminan con una cadena de texto en particular.
Para esta tarea, generalmente usamos el operador LIKE con algunos comodines (wildcards).
Por ejemplo, usamos lo siguiente para buscar los registros en la columna &amp;ldquo;email&amp;rdquo; de la tabla &amp;ldquo;clientes&amp;rdquo;, que terminen con &amp;ldquo;dominio.com&amp;rdquo;.
SELECT * FROM clientes WHERE email LIKE &amp;#39;%dominio.</description>
    </item>
    
    <item>
      <title>pip-check para encontrar actualizaciones de paquetes de Python</title>
      <link>https://til.hal.com.mx/posts/pip-check_encontrar_actualizaciones_de_paquetes_python/</link>
      <pubDate>Mon, 28 Oct 2019 15:33:34 -0600</pubDate>
      
      <guid>https://til.hal.com.mx/posts/pip-check_encontrar_actualizaciones_de_paquetes_python/</guid>
      <description>Generalmente es buena verificar que la versión de los paquetes de Python que estamos usando en un proyecto sean las apropiadas.
Con pip list podemos ver una lista de todos los paquetes de python que tenemos instalados, así como la versión de cada uno de ellos. Si agregamos el flag --outdated obtenemos una lista de los paquetes para los cuales existe una versión más reciente.
pip list --outdated Una vez identificado un paquete con una nueva versión que deseamos actualizar, usamos pip install --upgrade *nombre del paquete*.</description>
    </item>
    
    <item>
      <title>Cambiar la zona horaria de datos Timestamp o Detetime en un query de SQL</title>
      <link>https://til.hal.com.mx/posts/cambiar_zona_horaria_query_sql/</link>
      <pubDate>Tue, 22 Oct 2019 16:23:32 -0500</pubDate>
      
      <guid>https://til.hal.com.mx/posts/cambiar_zona_horaria_query_sql/</guid>
      <description>Es común que las fechas almacenadas en una tabla no se encuentren en la misma zona horaria que las necesitamos.
Podemos cambiar la zona horaria de nuestros datos al realizar un query, sin necesidad de hacer cambios directamente a la tabla que los contiene.
Para ello necesitamos el código de la la zona horario en la que han sido almacenados los datos y el código de la zona a la que deseamos cambiarlos.</description>
    </item>
    
    <item>
      <title>Aplicar una funcion a un data frame, por renglon, usando purrr</title>
      <link>https://til.hal.com.mx/posts/aplicar_funcion_por_renglon_usando_purrr/</link>
      <pubDate>Sat, 19 Oct 2019 13:36:32 -0500</pubDate>
      
      <guid>https://til.hal.com.mx/posts/aplicar_funcion_por_renglon_usando_purrr/</guid>
      <description>purrr es un paquete de tidyverse que agrega características de programación funcional a R.
Entre otras cosas, incluye la familia de funciones map(), que aplican una función a todos los elementos de una lista, de la misma manera a la familia de funciones apply() de base, pero con una mejor sintaxis y caraterísticas adicionales.
Al usar map() con un data frame, entonces la función es aplicada por columna.
Hay ocasiones en las necesitamos aplicar una función por renglón.</description>
    </item>
    
    <item>
      <title>Feather: data frames para Python y R</title>
      <link>https://til.hal.com.mx/posts/feather_data_frames_para_python_r/</link>
      <pubDate>Fri, 11 Oct 2019 23:33:07 -0500</pubDate>
      
      <guid>https://til.hal.com.mx/posts/feather_data_frames_para_python_r/</guid>
      <description>Frecuentemente necesito usar en R un data frame generado en Python por Pandas, o viceversa, tengo datos en un data frame de R que quiero usar en Python.
Una manera común para compartir data frames entre Python y R es exportarlas como archivos CSV. Este método tiene el inconveniente de que perdemos los metadatos de nuestro data frame.
Si tenemos datos de fecha con husos horarios, factores de R, texto con codificación específica o con cualquier otro metadato, este se pierde al exportar un data frame a CSV.</description>
    </item>
    
    <item>
      <title>Procesar archivo CSV en Admin de Django</title>
      <link>https://til.hal.com.mx/posts/procesar_csv_admin_django/</link>
      <pubDate>Sat, 05 Oct 2019 09:03:38 -0500</pubDate>
      
      <guid>https://til.hal.com.mx/posts/procesar_csv_admin_django/</guid>
      <description>La semana pasada tuve la tarea crear una vista del administrador de Django que procesara un CSV, sin ser explícitamente un modelo (para lo cuál ya existe un paquete -&amp;gt; Django CSV Import). El caso era que los usuarios finales requieren subir un CSV más amigable que la representación de los datos que creamos con los modelos.
Investigando un poco encontré varias sugerencias que no se adecuaban a nuestro caso y algunas soluciones bastante limitadas, como procesar el archivo dividiéndolo con saltos de línea (&amp;lsquo;cadena&amp;rsquo;.</description>
    </item>
    
    <item>
      <title>Elementos que permiten crear un contenedor</title>
      <link>https://til.hal.com.mx/drafts/elementos_que_permiten_crear_un_contenedor/</link>
      <pubDate>Thu, 03 Oct 2019 19:40:15 -0500</pubDate>
      
      <guid>https://til.hal.com.mx/drafts/elementos_que_permiten_crear_un_contenedor/</guid>
      <description>En una clase de contenedores aprendimos:
 Namespaces - Lo que puedo ver Control groups - A qué tengo acceso File Systems -  unshare -h
UTS</description>
    </item>
    
    <item>
      <title>HAL -&gt; Today I Learned</title>
      <link>https://til.hal.com.mx/posts/presentacion/</link>
      <pubDate>Fri, 20 Sep 2019 18:56:30 -0500</pubDate>
      
      <guid>https://til.hal.com.mx/posts/presentacion/</guid>
      <description>En este blog compartiremos hallazgos, aprendizajes y experiencias de parte de los desarrolladores de HAL, una empresa dedicada a crear productos digitales innovadores.</description>
    </item>
    
  </channel>
</rss>