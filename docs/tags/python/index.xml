<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on HAL Today I Learned</title>
    <link>https://hal-dev.github.io/hal-til-blog/tags/python/</link>
    <description>Recent content in python on HAL Today I Learned</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-mx</language>
    <lastBuildDate>Mon, 28 Oct 2019 15:33:34 -0600</lastBuildDate>
    
	<atom:link href="https://hal-dev.github.io/hal-til-blog/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>pip-check para encontrar actualizaciones de paquetes de Python</title>
      <link>https://hal-dev.github.io/hal-til-blog/posts/pip-check_encontrar_actualizaciones_de_paquetes_python/</link>
      <pubDate>Mon, 28 Oct 2019 15:33:34 -0600</pubDate>
      
      <guid>https://hal-dev.github.io/hal-til-blog/posts/pip-check_encontrar_actualizaciones_de_paquetes_python/</guid>
      <description>Generalmente es buena verificar que la versión de los paquetes de Python que estamos usando en un proyecto sean las apropiadas.
Con pip list podemos ver una lista de todos los paquetes de python que tenemos instalados, así como la versión de cada uno de ellos. Si agregamos el flag --outdated obtenemos una lista de los paquetes para los cuales existe una versión más reciente.
pip list --outdated Una vez identificado un paquete con una nueva versión que deseamos actualizar, usamos pip install --upgrade *nombre del paquete*.</description>
    </item>
    
    <item>
      <title>Feather: data frames para Python y R</title>
      <link>https://hal-dev.github.io/hal-til-blog/posts/feather_data_frames_para_python_r/</link>
      <pubDate>Fri, 11 Oct 2019 23:33:07 -0500</pubDate>
      
      <guid>https://hal-dev.github.io/hal-til-blog/posts/feather_data_frames_para_python_r/</guid>
      <description>Frecuentemente necesito usar en R un data frame generado en Python por Pandas, o viceversa, tengo datos en un data frame de R que quiero usar en Python.
Una manera común para compartir data frames entre Python y R es exportarlas como archivos CSV. Este método tiene el inconveniente de que perdemos los metadatos de nuestro data frame.
Si tenemos datos de fecha con husos horarios, factores de R, texto con codificación específica o con cualquier otro metadato, este se pierde al exportar un data frame a CSV.</description>
    </item>
    
    <item>
      <title>Procesar archivo CSV en Admin de Django</title>
      <link>https://hal-dev.github.io/hal-til-blog/posts/procesar_csv_admin_django/</link>
      <pubDate>Sat, 05 Oct 2019 09:03:38 -0500</pubDate>
      
      <guid>https://hal-dev.github.io/hal-til-blog/posts/procesar_csv_admin_django/</guid>
      <description>La semana pasada tuve la tarea crear una vista del administrador de Django que procesara un CSV, sin ser explícitamente un modelo (para lo cuál ya existe un paquete -&amp;gt; Django CSV Import). El caso era que los usuarios finales requieren subir un CSV más amigable que la representación de los datos que creamos con los modelos.
Investigando un poco encontré varias sugerencias que no se adecuaban a nuestro caso y algunas soluciones bastante limitadas, como procesar el archivo dividiéndolo con saltos de línea (&amp;lsquo;cadena&amp;rsquo;.</description>
    </item>
    
  </channel>
</rss>