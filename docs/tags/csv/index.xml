<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>csv on HAL Today I Learned</title>
    <link>https://til.hal.com.mx/tags/csv/</link>
    <description>Recent content in csv on HAL Today I Learned</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-mx</language>
    <lastBuildDate>Sat, 05 Oct 2019 09:03:38 -0500</lastBuildDate>
    
	<atom:link href="https://til.hal.com.mx/tags/csv/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Procesar archivo CSV en Admin de Django</title>
      <link>https://til.hal.com.mx/posts/procesar_csv_admin_django/</link>
      <pubDate>Sat, 05 Oct 2019 09:03:38 -0500</pubDate>
      
      <guid>https://til.hal.com.mx/posts/procesar_csv_admin_django/</guid>
      <description>La semana pasada tuve la tarea crear una vista del administrador de Django que procesara un CSV, sin ser explícitamente un modelo (para lo cuál ya existe un paquete -&amp;gt; Django CSV Import). El caso era que los usuarios finales requieren subir un CSV más amigable que la representación de los datos que creamos con los modelos.
Investigando un poco encontré varias sugerencias que no se adecuaban a nuestro caso y algunas soluciones bastante limitadas, como procesar el archivo dividiéndolo con saltos de línea (&amp;lsquo;cadena&amp;rsquo;.</description>
    </item>
    
  </channel>
</rss>